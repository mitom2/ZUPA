// I/O OPERATIONS LIBRARY //
#include "inc/vector.szl"

void ioInitializeStorage()
{
    out(uint(0b10001110), 0b10001001);
}

void ioBegin()
{
    out(uint(0b10001110), 0b00000001);
}

void ioCancelRead()
{
    out(uint(0b10001110), 0b00101111);
}

void ioDisableInterrupts()
{
    out(uint(0b10001110), 0b00000010);
}

void ioEnableInterrupts()
{
    out(uint(0b10001110), 0b00000100);
}

bool ioCheckDataKeyboard()
{
    out(uint(0b10001110), 0b01100000);
    return !in(uint(0b10001110));
}

char ioReadKeyboard()
{
    out(uint(0b10001110), 0b01000001);
    return char(in(uint(0b10001110)));
}

bool ioCheckDataStorage()
{
    out(uint(0b10001110), 0b10110000);
    return !in(uint(0b10001110));
}

Vector ioGetStorageData()
{
    Vector res = vectorCreate(sizeof(int));
    vectorReserve(?@res, uint(512));
    out(uint(0b10001110), 0b10100000);
    uint addr = res.address;
    for (int i = 0; i < 512; i = i + 1)
    {
        in(uint(0b10001110))->addr;
        addr = addr + uint(1);
    }
    return res;
}

void ioReadStorage(ulong sector)
{
    out(uint(0b10001110), 0b10111100);
    out(uint(0b10001110), int(sector));
    out(uint(0b10001110), int(sector >> uint(8)));
    out(uint(0b10001110), int(sector >> uint(16)));
    out(uint(0b10001110), int(sector >> uint(24)));
    out(uint(0b10001110), 0b10111110);
}

void ioCheckReadyWriteStorage()
{
    out(uint(0b10001110), 0b10111011);
    return !in(uint(0b10001110));
}

void ioWriteStorage(ulong sector, uint position, Vector data)
{
    out(uint(0b10001110), 0b10111100);
    out(uint(0b10001110), int(sector));
    out(uint(0b10001110), int(sector >> uint(8)));
    out(uint(0b10001110), int(sector >> uint(16)));
    out(uint(0b10001110), int(sector >> uint(24)));
    out(uint(0b10001110), 0b10111111);
    out(uint(0b10001110), 0b10000000);
    out(uint(0b10001110), int(data.size));
    out(uint(0b10001110), int(data.size >> uint(8)));
    out(uint(0b10001110), int(position));
    out(uint(0b10001110), int(position >> uint(8)));
    uint addr = data.address;
    for (uint i = uint(0); i < data.size; i = i + uint(1))
    {
        out(uint(0b10001110), int @addr);
        addr = addr + uint(1);
    }
}

void ioWriteTimer(int data)
{
    out(uint(0b10001110), 0b11000010);
    out(uint(0b10001110), data);
}